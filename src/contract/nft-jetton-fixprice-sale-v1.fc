;; NFT sale smart contract v3

;; int equal_slices (slice a, slice b) asm "SDEQ";
;; builder store_coins(builder b, int x) asm "STVARUINT16";
;; (slice, int) load_coins(slice s) asm( -> 1 0) "LDVARUINT16";


int min_gas_amount() asm "1000000000 PUSHINT"; ;; 1 TON

_ load_data() inline {
    var ds = get_data().begin_parse();
    return (
        ds~load_int(1),    ;; is_complete
        ds~load_uint(32),   ;; created_at
        ds~load_msg_addr(), ;; marketplace_address
        ds~load_msg_addr(), ;; nft_address
        ds~load_msg_addr(), ;; nft_owner_address
        ds~load_coins(),    ;; full_price
        ds~load_ref(),      ;; fees_cell
        ds~load_int(1),     ;; jettons_configured
        ds~load_dict()      ;; jettons_dict
    );
}

_ load_fees(cell fees_cell) inline {
    var ds = fees_cell.begin_parse();
    return (
        ds~load_msg_addr(), ;; marketplace_fee_address
        ds~load_coins(),    ;; marketplace_fee,
        ds~load_msg_addr(), ;; royalty_address
        ds~load_coins()     ;; royalty_amount
    );
}

_ load_jetton_prices(slice prices_slice) inline {
    return (
        prices_slice~load_coins(), ;; full price
        prices_slice~load_coins(), ;; marketplace fee
        prices_slice~load_coins()  ;; royalty amount
    );
}

() save_data(int is_complete, int created_at, slice marketplace_address, slice nft_address, slice nft_owner_address, int full_price, cell fees_cell, int jettons_configured, cell jettons_dict) impure inline {
    set_data(
        begin_cell()
            .store_int(is_complete, 1)
            .store_uint(created_at, 32)
            .store_slice(marketplace_address)
            .store_slice(nft_address)
            .store_slice(nft_owner_address)
            .store_coins(full_price)
            .store_ref(fees_cell)
            .store_int(jettons_configured, 1)
            .store_dict(jettons_dict) ;; jettons_dict
            .end_cell()
    );
}

() send_money(slice address, int amount) impure inline {
    var msg = begin_cell()
        .store_uint(0x10, 6) ;; nobounce
        .store_slice(address)
        .store_coins(amount)
        .store_uint(0, 1 + 4 + 4 + 64 + 32 + 1 + 1)
        .end_cell();

    send_raw_message(msg, 1);
}

() send_jettons(slice jetton_wallet, int query_id, slice address, int amount, slice response_address, int fwd_amount) impure inline {
    int should_carry_gas = false;
    if (fwd_amount == -1) {
        fwd_amount = 0;
        should_carry_gas = true;
    }

    var msg_payload = begin_cell()
        .store_uint(jetton::transfer(), 32) ;; transfer
        .store_uint(query_id, 64)
        .store_coins(amount)
        .store_slice(address)
        .store_slice(response_address)
        .store_int(0, 1)
        .store_coins(fwd_amount)
        .end_cell();

    var msg = begin_cell()
        .store_uint(0x10, 6) ;; nobounce
        .store_slice(jetton_wallet)
        .store_coins(should_carry_gas ? 0 : 40000000) ;; 0.04 TON or zero
        .store_uint(1, 1 + 4 + 4 + 64 + 32 + 1 + 1)
        .store_ref(msg_payload)
        .end_cell();

    int flag = should_carry_gas ? 64 : 1;
    send_raw_message(msg, flag);
}


() transfer_nft(int query_id, slice new_owner, slice nft_address) impure inline {
    builder nft_transfer = begin_cell()
            .store_uint(op::transfer(), 32)
            .store_uint(query_id, 64)
            .store_slice(new_owner) ;; new_owner_address
            .store_slice(new_owner) ;; response_address
            .store_int(0, 1) ;; empty custom_payload
            .store_coins(30000000) ;; forward amount to new_owner_address 0.03 TON
            .store_int(0, 1); ;; empty forward_payload
    var nft_msg = begin_cell()
       .store_uint(0x18, 6)
       .store_slice(nft_address)
       .store_coins(0)
       .store_uint(1, 1 + 4 + 4 + 64 + 32 + 1 + 1)
       .store_ref(nft_transfer.end_cell());


    send_raw_message(nft_msg.end_cell(), 128);
}


() buy_with_tons(var args) impure {
    (
        int created_at,
        slice marketplace_address,
        slice nft_address,
        slice nft_owner_address,
        int full_price,
        cell fees_cell,
        cell jettons_dict,

        int my_balance,
        int msg_value,
        slice sender_address,
        int query_id
    ) = args;

    throw_unless(451, full_price != 0);
    throw_unless(450, msg_value >= full_price + min_gas_amount());

    var (
        marketplace_fee_address,
        marketplace_fee,
        royalty_address,
        royalty_amount
    ) = load_fees(fees_cell);

    ;; Owner message
    send_money(
        nft_owner_address,
        full_price - marketplace_fee - royalty_amount + (my_balance - msg_value)
    );

    ;; Royalty message
    if ((royalty_amount > 0) & (royalty_address.slice_bits() > 2)) {
        send_money(
            royalty_address,
            royalty_amount
        );
    }

    ;; Marketplace fee message
    send_money(
        marketplace_fee_address,
        marketplace_fee
    );

    transfer_nft(
        query_id, 
        sender_address, 
        nft_address
    );

    ;; Set sale as complete
    save_data(
        true,
        created_at,
        marketplace_address,
        nft_address,
        nft_owner_address,
        full_price,
        fees_cell,
        true,
        jettons_dict
    );
}

() buy_with_jettons(var args) impure {
    (
        int created_at,
        slice marketplace_address,
        slice nft_address,
        slice nft_owner_address,
        int full_price,
        cell fees_cell,
        cell jettons_dict,

        int my_balance,
        int msg_value,
        slice wallet_address,
        slice buyer_address,
        int  jetton_amount,
        slice jetton_prices,
        int query_id
    ) = args;

    var (jetton_price, jetton_marketplace_fee, jetton_royalty) = load_jetton_prices(jetton_prices);

    if ((jetton_amount < jetton_price) | (msg_value < min_gas_amount())) {
        send_jettons(wallet_address, query_id, buyer_address, jetton_amount, buyer_address, -1);
        return ();
    }

    ;; Load royalty
    var (
        marketplace_fee_address,
        _,
        royalty_address,
        _
    ) = load_fees(fees_cell);

    ;; Return revenue to owner
    var owner_revenue = jetton_price - jetton_marketplace_fee - jetton_royalty;
    send_jettons(wallet_address, query_id, nft_owner_address, owner_revenue, buyer_address, my_balance - msg_value);

    ;; Send royalty
    if ((jetton_royalty > 0) & (royalty_address.slice_bits() > 2)) {
        send_jettons(wallet_address, query_id, royalty_address, jetton_royalty, buyer_address, 0);
    }

    ;; Send marketplace fee
    send_jettons(wallet_address, query_id, marketplace_fee_address, jetton_marketplace_fee, buyer_address, 0);

    ;; Return the rest to the sender
    if (jetton_amount > jetton_price) {
        send_jettons(wallet_address, query_id, buyer_address, jetton_amount - jetton_price, buyer_address, 0);
    }

    ;; Transfer NFT
    transfer_nft(
        query_id, 
        buyer_address, 
        nft_address
    );

    ;; Set sale as complete
    save_data(
        true,
        created_at,
        marketplace_address,
        nft_address,
        nft_owner_address,
        full_price,
        fees_cell,
        true,
        jettons_dict
    );
}

() recv_internal(int my_balance, int msg_value, cell in_msg_full, slice in_msg_body) impure {
    slice cs = in_msg_full.begin_parse();
    int flags = cs~load_uint(4);

    if (flags & 1) {  ;; ignore all bounced messages
        return ();
    }

    slice sender_address = cs~load_msg_addr();

    var (
        is_complete,
        created_at,
        marketplace_address,
        nft_address,
        nft_owner_address,
        full_price,
        fees_cell,
        jettons_configured,
        jettons_dict
    ) = load_data();

    int op = 0;
    int query_id = 0;

    if (in_msg_body.slice_empty?() == false) {
        op = in_msg_body~load_uint(32);
        query_id = in_msg_body~load_uint(64);
    }

    ;; alow cancel complete contract for fix bug with duplicate transfet nft to sale
    if (op == 3) { ;; cancel sale
        throw_unless(457, msg_value >= min_gas_amount());
        throw_unless(458, equal_slices(sender_address, nft_owner_address) | equal_slices(sender_address, marketplace_address));

        var msg = begin_cell()
                .store_uint(0x10, 6) ;; nobounce
                .store_slice(nft_address)
                .store_coins(0)
                .store_uint(0, 1 + 4 + 4 + 64 + 32 + 1 + 1)
                .store_uint(op::transfer(), 32)
                .store_uint(query_id, 64)
                .store_slice(nft_owner_address) ;; new_owner_address
                .store_slice(nft_owner_address) ;; response_address;
                .store_int(0, 1) ;; empty custom_payload
                .store_coins(0) ;; forward amount to new_owner_address
                .store_int(0, 1); ;; empty forward_payload

        send_raw_message(msg.end_cell(), 64);

        save_data(
            true,
            created_at,
            marketplace_address,
            nft_address,
            nft_owner_address,
            full_price,
            fees_cell,
            jettons_configured,
            jettons_dict
        );
        return ();
    }

    if ((op == 555) & (is_complete == true) & equal_slices(sender_address, marketplace_address)) {
        ;; way to fix unexpected troubles with sale contract
        ;; for example if some one transfer nft to this contract
        var msg = in_msg_body~load_ref().begin_parse();
        var mode = msg~load_uint(8);
        send_raw_message(msg~load_ref(), mode);
        return ();
    }

    var is_initialized = (nft_owner_address.slice_bits() > 2) & jettons_configured; ;; not initialized if null address or jettons are not configured

    ;; handle buy with jettons
    if (op == jetton::transfer_notification()) {
        var (wc, addr_hash) = parse_std_addr(sender_address);
        
        ;; check workchain
        throw_unless(452, wc == 0);

        ;; load amount
        var jetton_amount = in_msg_body~load_coins();
        var buyer_address = in_msg_body~load_msg_addr();

        ;; check jetton address
        var (price_slice, found?) = jettons_dict.udict_get?(256, addr_hash);
        
        ;; return jettons back if complete or if not allowed jetton or not initialized
        if (is_complete | (~ found?) | (~ is_initialized)) {
            send_jettons(sender_address, query_id, buyer_address, jetton_amount, buyer_address, -1);
            return ();
        }

        buy_with_jettons(
            created_at,
            marketplace_address,
            nft_address,
            nft_owner_address,
            full_price,
            fees_cell,
            jettons_dict,

            my_balance,
            msg_value,
            sender_address,
            buyer_address,
            jetton_amount,
            price_slice,
            query_id
        );
        
        return ();
    }

    ;; Throw if sale is complete
    throw_if(404, is_complete);

    ifnot (is_initialized) {

        if (equal_slices(sender_address, marketplace_address) & (op == op::deploy())) {
            if (jettons_configured) {
                return (); ;; just accept coins 
            }

            var new_jettons_dict = in_msg_body~load_dict();
            save_data(
                is_complete,
                created_at,
                marketplace_address,
                nft_address,
                nft_owner_address,
                full_price,
                fees_cell,
                true, ;; set jettons configured 
                new_jettons_dict
            );
            return ();
        }

        throw_unless(500, equal_slices(sender_address, nft_address));
        throw_unless(501, op == op::ownership_assigned());
        slice prev_owner_address = in_msg_body~load_msg_addr();

        save_data(
            is_complete,
            created_at,
            marketplace_address,
            nft_address,
            prev_owner_address,
            full_price,
            fees_cell,
            jettons_configured,
            jettons_dict
        );

        return ();
    }

    if (op == 0) {
        buy_with_tons(
            created_at,
            marketplace_address,
            nft_address,
            nft_owner_address,
            full_price,
            fees_cell,
            jettons_dict,

            my_balance,
            msg_value,
            sender_address,
            0
        );
        return ();
    }

    if (op == 1) { ;; just accept coins
        return ();
    }

    throw(0xffff);
}

(int, int, int, slice, slice, slice, int, cell, slice, int, slice, int) get_sale_data() method_id {
    var (
        is_complete,
        created_at,
        marketplace_address,
        nft_address,
        nft_owner_address,
        full_price,
        fees_cell,
        jettons_configured,
        jettons_dict
    ) = load_data();

    var (
        marketplace_fee_address,
        marketplace_fee,
        royalty_address,
        royalty_amount
    ) = load_fees(fees_cell);

    return (
        0x4649584A,    ;; fix price sale ("FIXJ")
        is_complete,
        created_at,
        marketplace_address,
        nft_address,
        nft_owner_address,
        full_price,
        jettons_dict,
        marketplace_fee_address,
        marketplace_fee,
        royalty_address,
        royalty_amount
    );
}